#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# imports
import json
import sys

# constants
CUBE_SIZE = [64, 64, 64]
MAP_GAME = "Quake"
MAP_FORMAT = "Valve"

# brush class
class MapBrush:

	def __init__(self, origin, size, texture):
		self.origin = origin
		self.size = size
		self.texture = texture

	def write(self, file):

		# start brush
		file.write("{\n")

		# write faces
		file.write("( {1} {5} {6} ) ( {1} {2} {6} ) ( {1} {2} {3} ) {0} [ 0 1 0 0 ] [ 0 0 -1 0 ] 0 1 1\n".format(self.texture, self.origin[0], self.origin[1], self.origin[2], self.origin[0] + self.size[0], self.origin[1] + self.size[1], self.origin[2] + self.size[2]))
		file.write("( {1} {2} {6} ) ( {4} {2} {6} ) ( {4} {2} {3} ) {0} [ 1 0 0 0 ] [ 0 0 -1 0 ] 0 1 1\n".format(self.texture, self.origin[0], self.origin[1], self.origin[2], self.origin[0] + self.size[0], self.origin[1] + self.size[1], self.origin[2] + self.size[2]))
		file.write("( {4} {2} {3} ) ( {4} {5} {3} ) ( {1} {5} {3} ) {0} [ 1 0 0 0 ] [ 0 -1 0 0 ] 0 1 1\n".format(self.texture, self.origin[0], self.origin[1], self.origin[2], self.origin[0] + self.size[0], self.origin[1] + self.size[1], self.origin[2] + self.size[2]))
		file.write("( {1} {5} {6} ) ( {4} {5} {6} ) ( {4} {2} {6} ) {0} [ 1 0 0 0 ] [ 0 -1 0 0 ] 0 1 1\n".format(self.texture, self.origin[0], self.origin[1], self.origin[2], self.origin[0] + self.size[0], self.origin[1] + self.size[1], self.origin[2] + self.size[2]))
		file.write("( {4} {5} {3} ) ( {4} {5} {6} ) ( {1} {5} {6} ) {0} [ 1 0 0 0 ] [ 0 0 -1 0 ] 0 1 1\n".format(self.texture, self.origin[0], self.origin[1], self.origin[2], self.origin[0] + self.size[0], self.origin[1] + self.size[1], self.origin[2] + self.size[2]))
		file.write("( {4} {2} {6} ) ( {4} {5} {6} ) ( {4} {5} {3} ) {0} [ 0 1 0 0 ] [ 0 0 -1 0 ] 0 1 1\n".format(self.texture, self.origin[0], self.origin[1], self.origin[2], self.origin[0] + self.size[0], self.origin[1] + self.size[1], self.origin[2] + self.size[2]))

		# end brush
		file.write("}\n")

# entity class
class MapEntity:

	def __init__(self):
		self.brushes = []
		self.keyvalues = []

	def write(self, file):

		# start entity
		file.write("{\n")

		# write keyvalues
		for keyvalue in self.keyvalues:
			file.write("\"{0}\" \"{1}\"\n".format(keyvalue[0], keyvalue[1]))

		# write brushes
		for brush in self.brushes:
			brush.write(file)

		# end entity
		file.write("}\n")

# print help text
def print_help():
	print("Usage: tmj2map [level.tmj] [level.map]")
	exit(0)

# make ceiling-sized brush
def make_ceiling(size, height, texture):
	size = [size[0] * CUBE_SIZE[0], size[1] * CUBE_SIZE[1], CUBE_SIZE[2]]
	origin = [0, 0, CUBE_SIZE[2] * height]
	return MapBrush(origin, size, texture)

# make floor-sized brush
def make_floor(size, texture):
	size = [size[0] * CUBE_SIZE[0], size[1] * CUBE_SIZE[1], CUBE_SIZE[2]]
	origin = [0, 0, -CUBE_SIZE[2]]
	return MapBrush(origin, size, texture)

# make wall brush
def make_wall(origin, texture, height):
	origin = [origin[0] * CUBE_SIZE[0], origin[1] * CUBE_SIZE[1], 0]
	size = [CUBE_SIZE[0], CUBE_SIZE[1], CUBE_SIZE[2] * height]
	return MapBrush(origin, size, texture)

# main
if __name__ == "__main__":

	# sanity check
	if len(sys.argv) < 3:
		print("Error: Must provide input and output files!")
		print_help()

	# input and output filenames
	input_filename = sys.argv[1]
	output_filename = sys.argv[2]

	# open for reading
	input_file = open(input_filename, "r")
	input_json = json.load(input_file)

	print("Successfully opened \"{0}\" for reading".format(input_filename))

	# open for writing
	output_file = open(output_filename, "w")

	print("Successfully opened \"{0}\" for writing".format(output_filename))

	# write map header
	output_file.write("// Game: {0}\n".format(MAP_GAME))
	output_file.write("// Format: {0}\n".format(MAP_FORMAT))

	# create worldspawn
	worldspawn = MapEntity()

	# add worldspawn keyvalues
	worldspawn.keyvalues.append(["classname", "worldspawn"])
	worldspawn.keyvalues.append(["mapversion", "220"])

	map_width = input_json["width"]
	map_height = input_json["height"]

	# add floor and ceiling
	worldspawn.brushes.append(make_floor([map_width, map_height], "floor"))
	worldspawn.brushes.append(make_ceiling([map_width, map_height], 4, "ceiling"))

	# write worldspawn
	worldspawn.write(output_file)

	# clean up file handles
	input_file.close()
	output_file.close()
